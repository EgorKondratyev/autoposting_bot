import random

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –•–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Å–≤–æ–µ–º—É –ø–æ—Å—Ç—É:
create_url_menu = InlineKeyboardMarkup(row_width=2)
yes_button = InlineKeyboardButton(text='–î–∞', callback_data='create_url_yes')
no_button = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='create_url_no')
back_button_url = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='day_back')
create_url_menu.insert(yes_button).insert(no_button).add(back_button_url)


async def create_keyboard_channels(channels: list | tuple, user_id: int) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ InlineKeyboardMarkup –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö channels –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ user_id
    :param channels:
    :param user_id:
    :return:
    """
    channels_menu = InlineKeyboardMarkup(row_width=4)
    for attribute in channels:
        channel_id = str(attribute[0])
        channel_name = attribute[1]
        channel_button = InlineKeyboardButton(text=channel_name, callback_data=f'channels_{channel_id}_{user_id}')
        channels_menu.insert(channel_button)
    stop_button = InlineKeyboardButton('üõëSTOPüõë', callback_data='stop_fsm')
    channels_menu.add(stop_button)
    return channels_menu


async def create_keyboard_tagged_channels(channels: list | tuple, user_id: int, channels_tagged: list):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ InlineKeyboardMarkup –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ channels_tagged –Ω–∞ –æ—Å–Ω–æ–≤–µ channels –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ user_id
    :param channels:
    :param user_id:
    :param channels_tagged: –ü–æ–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    :return:
    """
    channels_menu = InlineKeyboardMarkup(row_width=4)
    i = 0
    for attribute in channels:
        channel_id = str(attribute[0])
        channel_name = attribute[1]
        if channel_id not in channels_tagged:
            channel_button = InlineKeyboardButton(text=channel_name, callback_data=f'channels_{channel_id}_{user_id}')
            channels_menu.insert(channel_button)
        else:
            i += 1
            channel_button = InlineKeyboardButton(text=f'{channel_name}üéà',
                                                  callback_data=f'channels_{channel_id}_{user_id}')
            channels_menu.insert(channel_button)
    if i != 0:
        next_button = InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='channels_tagged_next')
        channels_menu.add(next_button)

    stop_button = InlineKeyboardButton('üõëSTOPüõë', callback_data='stop_fsm')
    channels_menu.add(stop_button)

    return channels_menu


async def create_keyboard_time_24_hours() -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ InlineKeyboardMarkup, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 24 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤.
    :return:
    """
    time_menu = InlineKeyboardMarkup(row_width=4)
    hours = [
        '00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00', '11:00',
        '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00',
    ]
    snow = 'üçì'
    random_snow = random.randint(0, len(hours))
    for i, hour in enumerate(hours):
        if random_snow != i:
            hour_button = InlineKeyboardButton(text=hour, callback_data=f'time_{hour}')
        else:
            hour_button = InlineKeyboardButton(text=hour + snow, callback_data=f'time_{hour}')
        time_menu.insert(hour_button)
    back_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='channels_tagged_back')
    time_menu.add(back_button)
    return time_menu


async def create_keyboard_day() -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç.
    :return:
    """
    day_menu = InlineKeyboardMarkup(row_width=1)
    days = {99: '–°–µ–≥–æ–¥–Ω—è', 0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞',
            6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
    for index_day, day in days.items():
        day_button = InlineKeyboardButton(text=f'{day}', callback_data=f'day_{index_day}')
        day_menu.insert(day_button)
    back_button = InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='time_back')
    day_menu.add(back_button)
    return day_menu


async def create_confirm_post() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ InlineKeyboardMarkup, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –ø–æ—Å—Ç–∞.
    :return:
    """
    confirm_menu = InlineKeyboardMarkup(row_width=1)
    preview_button = InlineKeyboardButton(text='–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', callback_data='confirm_individual_preview')
    add_delete_post_button = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ',
                                                  callback_data='confirm_individual_auto_delete')
    get_time_button = InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏', callback_data='confirm_individual_time')
    get_channels_button = InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤', callback_data='confirm_individual_channels')
    next_button = InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', callback_data='confirm_individual_next')
    stop_button = InlineKeyboardButton('üõëSTOPüõë', callback_data='stop_fsm')
    confirm_menu.insert(preview_button).insert(add_delete_post_button).insert(get_time_button).\
        insert(get_channels_button).insert(next_button).insert(stop_button)
    return confirm_menu


async def create_button_for_post(text_button, url_button) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ InlineKeyboardMarkup –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param text_button:
    :param url_button:
    :return:
    """
    button_for_post_menu = InlineKeyboardMarkup(row_width=1)
    button = InlineKeyboardButton(text=text_button, url=url_button)
    button_for_post_menu.insert(button)
    return button_for_post_menu


async def create_type_interval_auto_delete():
    type_time_menu = InlineKeyboardMarkup(row_width=3)
    types_times = ('–ú–∏–Ω—É—Ç—ã', '–ß–∞—Å—ã', '–î–Ω–∏')
    for type_time in types_times:
        time_button = InlineKeyboardButton(text=type_time, callback_data=f'autodelete_individual_type_time_{type_time}')
        type_time_menu.insert(time_button)
    return type_time_menu


async def create_interval_auto_delete(type_time: str):
    interval_menu = InlineKeyboardMarkup(row_width=4)
    snow = 'üçë'
    if type_time == '–ú–∏–Ω—É—Ç—ã':
        minutes = ('5', '10', '15', '20', '25', '30', '35', '40', '45', '55')
        number_snow = random.randint(0, len(minutes) - 1)
        for i, minute in enumerate(minutes, 0):
            if i == number_snow:
                minute += snow
            minute_button = InlineKeyboardButton(text=minute + ' –º–∏–Ω',
                                                 callback_data=f'autodelete_individual_interval_{minute}')
            interval_menu.insert(minute_button)
    elif type_time == '–ß–∞—Å—ã':
        hours = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18',
                 '19', '20', '21', '22', '23')
        for hour in hours:
            hour_button = InlineKeyboardButton(text=hour + ' —á',
                                               callback_data=f'autodelete_individual_interval_{hour}')
            interval_menu.insert(hour_button)
    else:  # –î–Ω–∏
        days = ('1', '2', '3', '4', '5')
        for day in days:
            day_button = InlineKeyboardButton(text=day + ' –¥–Ω—è(-–µ–Ω—å, -–Ω–µ–π)',
                                              callback_data=f'autodelete_individual_interval_{day}')
            interval_menu.add(day_button)
    return interval_menu
