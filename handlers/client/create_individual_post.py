import random
import re
import traceback

from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import BadRequest
from async_cron.job import CronJob

from create_bot.bot import dp
from databases.client import ChannelDB, PostDB, IndividualPostDB
from handlers.stop_fsm import create_keyboard_stop_fsm
from keyboards.inline.individual_post import create_keyboard_channels, create_keyboard_time_24_hours, \
    create_keyboard_tagged_channels, create_keyboard_day, create_confirm_post, create_url_menu, create_button_for_post, \
    create_interval_auto_delete, create_type_interval_auto_delete
from keyboards.inline.start_command import create_start_menu
from states.individual_post import IndividualPostFSM
from log.create_logger import logger
from utils.publication_post_individual import publication_post, send_album
from utils.generate_random_tag import generate_random_tag_md5
from utils.create_cron import msh


# @dp.callback_query_handler(Text(equals='start_create_post'))
async def start_create_post(callback: CallbackQuery):
    """
    –ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞. –î–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
    –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞.
    :param callback:
    :return:
    """
    await callback.answer()
    channel_db = ChannelDB()
    channels = channel_db.get_channels_by_user_id(user_id=callback.from_user.id)
    if channels:
        channels_menu = await create_keyboard_channels(channels=channels, user_id=callback.from_user.id)
        await callback.message.answer('–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é <i>"–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"</i>\n\n'
                                      '–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª(-—ã) (–Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ä–∞–Ω–µ–µ '
                                      '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª): \n\n'
                                      '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π "/stop"',
                                      reply_markup=channels_menu, parse_mode='html')
        await IndividualPostFSM.get_channel.set()
    else:
        await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!')


# @dp.callback_query_handler(Text(equals='channels_tagged_back'), state=IndividualPostFSM.get_time)
async def set_channels_back(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–∑ get_time handler –≤ set_channel handler
    :param callback:
    :param state:
    :return:
    """
    async with state.proxy() as data:
        if data.get('channels_id'):
            del data['channels_id']

    await callback.answer()
    channel_db = ChannelDB()
    channels = channel_db.get_channels_by_user_id(user_id=callback.from_user.id)
    if channels:
        await callback.message.answer('–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é <i>"–ø–æ—Å—Ç—ã –∏–∑ –¥–æ–Ω–æ—Ä–∞"</i>\n\n'
                                      '<b>–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª(-—ã) –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:</b> \n\n'
                                      '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π "/stop"',
                                      reply_markup=await create_keyboard_channels(channels=channels,
                                                                                  user_id=callback.from_user.id),
                                      parse_mode='html')
        await IndividualPostFSM.get_channel.set()
    else:
        await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!')


# @dp.callback_query_handler(Text(startswith='channels_'), state=IndividualPostFSM.get_channel)
async def set_channels(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤—ã–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç—ã
    :param callback:
    :param state:
    :return:
    """
    await callback.answer('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω')
    data = str(callback.data[len('channels_'):]).split('_')
    channel_id = data[0]

    async with state.proxy() as data:
        if data.get('channels_id'):
            if channel_id not in data['channels_id']:
                data['channels_id'].append(channel_id)
            else:
                data['channels_id'].remove(channel_id)
        else:
            data['channels_id'] = [channel_id]
        channels_tagged = data['channels_id']

    channel_db = ChannelDB()
    channels = channel_db.get_channels_by_user_id(user_id=callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=await create_keyboard_tagged_channels(channels=channels,
                                                                                                user_id=callback.from_user.id,
                                                                                                channels_tagged=channels_tagged
                                                                                                ))


# @dp.callback_query_handler(Text(equals='channels_tagged_next'), state=IndividualPostFSM.get_channel)
async def get_time(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω')
    data = str(callback.data[len('channels_'):]).split('_')
    channel_id = data[0]

    async with state.proxy() as data:
        data['channel_id'] = channel_id

    await callback.message.edit_text('–û—Ç–ª–∏—á–Ω–æ!<b>–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è</b>, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç –∏–ª–∏ –∂–µ –Ω–∞–ø–∏—à–∏ '
                                     '–≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é (–ü—Ä–∏–º–µ—Ä: 14:25, 17:03): \n\n'
                                     '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π "/stop"',
                                     reply_markup=await create_keyboard_time_24_hours(),
                                     parse_mode='html')
    await IndividualPostFSM.get_time.set()


# @dp.callback_query_handler(Text(equals='time_back'), state=IndividualPostFSM.get_day)
async def get_time_back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–û—Ç–ª–∏—á–Ω–æ!<b>–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è</b>, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç –∏–ª–∏ –∂–µ –Ω–∞–ø–∏—à–∏ '
                                     '–≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é (–ü—Ä–∏–º–µ—Ä: 14:25, 17:03): \n\n'
                                     '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π "/stop"',
                                     reply_markup=await create_keyboard_time_24_hours(),
                                     parse_mode='html')
    await IndividualPostFSM.get_time.set()


# @dp.callback_query_handler(Text(startswith='time_'), state=IndividualPostFSM.get_time)
async def get_day(callback: CallbackQuery, state: FSMContext):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –ø–æ –∫–Ω–æ–ø–∫–µ, —Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    :param callback:
    :param state:
    :return:
    """
    time = callback.data[5:]
    async with state.proxy() as data:
        data['time'] = time
    await callback.answer('–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    words = ['–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æüçµ', '–û—Ç–ª–∏—á–Ω–æ‚òïÔ∏è', '–°—É–ø–µ—Äüçµ']

    await callback.message.answer(f'{random.choice(words)}! <i>–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è {time}</i>\n\n'
                                  f'<b>–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å</b>, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: \n\n'
                                  f'–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ*, –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å "–°–µ–≥–æ–¥–Ω—è" –∏ –ø—Ä–∏ —ç—Ç–æ–º –≤—Ä–µ–º—è –±—É–¥–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ —ç—Ç–æ–≥–æ '
                                  f'–¥–Ω—è, —Ç–æ –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∑–∞–≤—Ç—Ä–∞',
                                  reply_markup=await create_keyboard_day(), parse_mode='html')
    await IndividualPostFSM.get_day.set()


# @dp.message_handler(state=IndividualPostFSM.get_time)
async def get_day_message(message: Message, state: FSMContext):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–µ–º—è –≤–≤—ë–ª –≤—Ä—É—á–Ω—É—é, —Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    :param message:
    :param state:
    :return:
    """
    time = message.text
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç 00:00 –¥–æ 19:59
    check_time_first = re.findall(r'[0-1][\d]:[0-5][\d]', time)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç 20:00 –¥–æ 23:59
    check_time_second = re.findall(r"2[0-3]:[0-5][\d]", time)
    if check_time_first or check_time_second:
        async with state.proxy() as data:
            data['time'] = time
        words = ['–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æüçµ', '–û—Ç–ª–∏—á–Ω–æ‚òïÔ∏è', '–°—É–ø–µ—Äüçµ']
        await message.answer(f'{random.choice(words)}! <i>–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è {time}</i>\n\n'
                             f'<b>–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å</b>, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: \n\n'
                             f'–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ*, –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å "–°–µ–≥–æ–¥–Ω—è" –∏ –ø—Ä–∏ —ç—Ç–æ–º –≤—Ä–µ–º—è –±—É–¥–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ —ç—Ç–æ–≥–æ '
                             f'–¥–Ω—è, —Ç–æ –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∑–∞–≤—Ç—Ä–∞',
                             reply_markup=await create_keyboard_day(), parse_mode='html')
        await IndividualPostFSM.get_day.set()
    else:
        await message.answer('–ù–∞—Ä—É—à–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏\n\n'
                             '–ü—Ä–∏–º–µ—Ä: 22:45', reply_markup=create_keyboard_stop_fsm())


# @dp.callback_query_handler(Text(equals='day_back'), state=IndividualPostFSM.get_button)
async def get_day_back(callback: CallbackQuery):
    await callback.answer()
    words = ['–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æüçµ', '–û—Ç–ª–∏—á–Ω–æ‚òïÔ∏è', '–°—É–ø–µ—Äüçµ']
    await callback.message.answer(f'{random.choice(words)}!\n\n'
                                  f'<b>–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å</b>, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: \n\n'
                                  f'–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ*, –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å "–°–µ–≥–æ–¥–Ω—è" –∏ –ø—Ä–∏ —ç—Ç–æ–º –≤—Ä–µ–º—è –±—É–¥–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ —ç—Ç–æ–≥–æ '
                                  f'–¥–Ω—è, —Ç–æ –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∑–∞–≤—Ç—Ä–∞',
                                  reply_markup=await create_keyboard_day(), parse_mode='html')
    await IndividualPostFSM.get_day.set()


# @dp.callback_query_handler(Text(startswith='day_'), state=IndividualPostFSM.get_day)
async def get_button_for_post(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    day = callback.data[4:]
    async with state.proxy() as data:
        data['day'] = day
        data['tag'] = await generate_random_tag_md5()

    await callback.message.edit_text('–•–æ—á–µ—à—å –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Å–≤–æ–µ–º—É –ø–æ—Å—Ç—É?', reply_markup=create_url_menu)
    await IndividualPostFSM.get_button.set()


# @dp.callback_query_handler(Text(startswith='create_url_'), state=IndividualPostFSM.get_button)
async def check_create_button(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ç–æ, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–≤–æ–π –ø–æ—Å—Ç, –µ—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
    —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ.
    :param callback:
    :param state:
    :return:
    """
    check_create = callback.data[len('create_url_'):]
    if check_create == 'yes':
        await callback.message.edit_text('–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç —É –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –ø–æ—Å—Ç—É: ')
        await IndividualPostFSM.get_text_for_button.set()
    else:
        await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–æ–Ω–æ—Ä–∞ –∏–ª–∏ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –µ–≥–æ —Å–∞–º (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å '
                                         '–ª—é–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç):\n\n'
                                         '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: "/stop"', reply_markup=create_keyboard_stop_fsm())
        await IndividualPostFSM.get_post.set()


# @dp.message_handler(state=IndividualPostFSM.get_text_for_button)
async def get_url_for_button(message: Message, state: FSMContext):
    if len(message.text) < 50:
        async with state.proxy() as data:
            data['text_button'] = message.text
        await message.answer('–û—Ç–ª–∏—á–Ω–æ‚òïÔ∏è\n\n'
                             '–í–≤–µ–¥–∏ url –¥–ª—è –∫–Ω–æ–ø–∫–∏: ')
        await IndividualPostFSM.get_url_for_button.set()
    else:
        await message.answer('–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!\n\n'
                             '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å—Ç–æ–øüò¥',
                             reply_markup=create_keyboard_stop_fsm())


# @dp.message_handler(state=IndividualPostFSM.get_url_for_button)
async def get_post(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['url_button'] = message.text

    await message.answer('–û—Ç–ø—Ä–∞–≤—å –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–æ–Ω–æ—Ä–∞ –∏–ª–∏ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –µ–≥–æ —Å–∞–º (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å '
                         '–ª—é–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç):\n\n'
                         '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: "/stop"', reply_markup=create_keyboard_stop_fsm())
    await IndividualPostFSM.get_post.set()


# @dp.message_handler(state=IndividualPostFSM.get_post, content_types='any')
async def confirm_create_post(message: Message, state: FSMContext):
    try:
        individual_post_db = IndividualPostDB()
        if message.photo:
            if message.caption is not None:
                if message.html_text:
                    text_user = message.html_text
                else:
                    text_user = message.caption
            else:
                text_user = ''
            async with state.proxy() as data:
                data['text'] = text_user
                data['photo'] = message.photo[-1].file_id
                tag = data['tag']

            if message.media_group_id:
                individual_post_db.add_post(tag=tag, photo_id=message.photo[-1].file_id, content=text_user)

            text_confirm_post = f'{text_user}'
            await message.answer_photo(photo=message.photo[-1].file_id,
                                       caption=text_confirm_post, parse_mode='html',
                                       reply_markup=await create_confirm_post())

        elif message.video:
            if message.caption is not None:
                if message.html_text:
                    text_user = message.html_text
                else:
                    text_user = message.caption
            else:
                text_user = ''
            async with state.proxy() as data:
                data['text'] = text_user
                data['video'] = message.video.file_id
                tag = data['tag']

            if message.media_group_id:
                individual_post_db.add_post(tag=tag, photo_id=message.video.file_id, content=text_user)

            text_confirm_post = f'{text_user}'
            await message.answer_video(video=message.video.file_id,
                                       caption=text_confirm_post, parse_mode='html',
                                       reply_markup=await create_confirm_post())

        elif message.animation:
            if message.caption is not None:
                if message.html_text:
                    text_user = message.html_text
                else:
                    text_user = message.caption
            else:
                text_user = ''
            async with state.proxy() as data:
                data['text'] = text_user
                data['animation'] = message.animation.file_id

            text_confirm_post = f'{text_user}'
            await message.answer_animation(animation=message.animation.file_id,
                                           caption=text_confirm_post, parse_mode='html',
                                           reply_markup=await create_confirm_post())

        elif message.text is not None:
            if message.html_text:
                text_user = message.html_text
            else:
                text_user = message.text
            async with state.proxy() as data:
                data['text'] = text_user

            text_confirm_post = f'{text_user}'
            await message.answer(text_confirm_post, parse_mode='html', reply_markup=await create_confirm_post(),
                                 disable_web_page_preview=True)

        await IndividualPostFSM.confirm.set()
    except Exception:
        logger.warning('...')
        traceback.print_exc()


# @dp.callback_query_handler(Text(equals='confirm_individual_auto_delete'), state=IndividualPostFSM.confirm)
async def get_type_time_auto_delete(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ "–∞–≤—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è" –ø–æ—Å—Ç–∞: ',
                                  reply_markup=await create_type_interval_auto_delete())
    await IndividualPostFSM.get_type_time.set()


# @dp.callback_query_handler(Text(startswith='autodelete_individual_type_time_'), state=IndividualPostFSM.get_type_time)
async def get_interval_auto_delete(callback: CallbackQuery, state: FSMContext):
    type_time = callback.data[len('autodelete_individual_type_time_'):]
    async with state.proxy() as data:
        data['type_time_auto_delete'] = type_time

    text_type_time = '<b>–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª</b>, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç—ã: \n\n'
    if type_time == '–ú–∏–Ω—É—Ç—ã':
        text_type_time += '–†–∞–∑ –≤ 5 –º–∏–Ω—É—Ç, –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç'
    elif type_time == '–ß–∞—Å—ã':
        text_type_time += '–†–∞–∑ –≤ 2 —á–∞—Å–∞, –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞'
    else:
        text_type_time += '–†–∞–∑ –≤ –¥–µ–Ω—å, —Ä–∞–∑ –≤ 3 –¥–Ω—è'
    await callback.message.edit_text(text_type_time,
                                     reply_markup=await create_interval_auto_delete(type_time),
                                     parse_mode='html')
    await IndividualPostFSM.get_interval.set()


@dp.callback_query_handler(Text(startswith='autodelete_individual_interval_'), state=IndividualPostFSM.get_interval)
async def set_interval(callback: CallbackQuery, state: FSMContext):
    interval = callback.data[len('autodelete_individual_interval_'):]
    async with state.proxy() as data:
        data['interval_auto_delete'] = interval
        type_time = data['type_time_auto_delete']

    await callback.message.delete()
    await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è: \n\n'
                                  f'<b>–¢–∏–ø –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:</b> {type_time}  |  <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {interval}',
                                  parse_mode='html')
    await IndividualPostFSM.confirm.set()


# @dp.callback_query_handler(Text(equals='confirm_individual_preview'), state=IndividualPostFSM.confirm)
async def preview_post(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with state.proxy() as data:
        text_button = data.get('text_button')
        url_button = data.get('url_button')
        text = data['text']
        photo = data.get('photo')
        video = data.get('video')
        animation = data.get('animation')

    if photo:
        if text_button:
            try:
                button_link = await create_button_for_post(text_button=text_button, url_button=url_button)
                await callback.message.answer_photo(photo=photo, caption=text, reply_markup=button_link,
                                                    parse_mode='html')
            except BadRequest:
                await callback.message.answer('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è –∫ –ø–æ—Å—Ç—É (–≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ '
                                              '–Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω url)\n\n'
                                              '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
                await state.finish()
                await callback.message.answer('–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        else:
            await callback.message.answer_photo(photo=photo, caption=text, parse_mode='html')
    elif video:
        if text_button:
            try:
                button_link = await create_button_for_post(text_button=text_button, url_button=url_button)
                await callback.message.answer_video(video=video, caption=text, reply_markup=button_link,
                                                    parse_mode='html')
            except BadRequest:
                await callback.message.answer('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è –∫ –ø–æ—Å—Ç—É (–≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ '
                                              '–Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω url)\n\n'
                                              '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
                await state.finish()
                await callback.message.answer('–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        else:
            await callback.message.answer_video(video=video, caption=text, parse_mode='html')
    elif animation:
        if text_button:
            try:
                button_link = await create_button_for_post(text_button=text_button, url_button=url_button)
                await callback.message.answer_animation(animation=animation, caption=text,
                                                        reply_markup=button_link, parse_mode='html')
            except BadRequest:
                await callback.message.answer('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è –∫ –ø–æ—Å—Ç—É (–≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ '
                                              '–Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω url)\n\n'
                                              '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
                await state.finish()
                await callback.message.answer('–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        else:
            await callback.message.answer_animation(animation=animation, caption=text, parse_mode='html')
    else:
        if text_button:
            try:
                button_link = await create_button_for_post(text_button=text_button, url_button=url_button)
                await callback.message.answer(text, reply_markup=button_link, parse_mode='html',
                                              disable_web_page_preview=True)
            except BadRequest:
                await callback.message.answer('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è –∫ –ø–æ—Å—Ç—É (–≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ '
                                              '–Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω url)\n\n'
                                              '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
                await state.finish()
                await callback.message.answer('–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        else:
            await callback.message.answer(text, parse_mode='html', disable_web_page_preview=True)


# @dp.callback_query_handler(Text(equals='confirm_individual_time'), state=IndividualPostFSM.confirm)
async def get_time_before_publication(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with state.proxy() as data:
        time = data['time']
        day = data['day']

    # no match ;(
    if day == '0':
        day_str = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    elif day == '1':
        day_str = '–í—Ç–æ—Ä–Ω–∏–∫'
    elif day == '2':
        day_str = '–°—Ä–µ–¥–∞'
    elif day == '3':
        day_str = '–ß–µ—Ç–≤–µ—Ä–≥'
    elif day == '4':
        day_str = '–ü—è—Ç–Ω–∏—Ü–∞'
    elif day == '5':
        day_str = '–°—É–±–±–æ—Ç–∞'
    elif day == '6':
        day_str = '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    else:
        day_str = '–°–µ–≥–æ–¥–Ω—è'

    await callback.message.answer(f'<b>–í—Ä–µ–º—è:</b> {time} | <b>–î–µ–Ω—å:</b> {day_str}', parse_mode='html')


# @dp.callback_query_handler(Text('confirm_individual_channels'), state=IndividualPostFSM.confirm)
async def get_channels_before_publication(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with state.proxy() as data:
        channels = data['channels_id']

    text_channel = f'–í—Å–µ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: \n\n'
    channel_db = ChannelDB()
    i = 0
    for channel in channels:
        name_channel = channel_db.get_name_channel(channel_id=channel)
        if name_channel:
            i += 1
            text_channel += f'{i}. {name_channel} | {channel}\n'
    await callback.message.answer(text_channel)


# @dp.callback_query_handler(Text(equals='confirm_individual_next'), state=IndividualPostFSM.confirm)
async def publication(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with state.proxy() as data:
        channels = data['channels_id']
        time = data['time']
        day = data['day']
        text_button = data.get('text_button')
        url_button = data.get('url_button')
        photo = data.get('photo')
        video = data.get('video')
        animation = data.get('animation')
        text = data['text']
        tag = data['tag']

        # auto delete:
        type_time_auto_delete = data.get('type_time_auto_delete')
        interval_auto_delete = data.get('interval_auto_delete')

    await state.finish()
    # –î–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –µ–≥–æ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    individual_post_db = IndividualPostDB()
    if not individual_post_db.exists_tag(tag=tag):
        post_db = PostDB()
        post_db.post_add(user_id=callback.from_user.id, tag=tag, context=text)
        await publication_post(tag=tag,
                               user_id=callback.from_user.id,
                               channels=channels,
                               time=time,
                               day=day,
                               text_button=text_button,
                               url_button=url_button,
                               text=text,
                               photo=photo, video=video, animation=animation,
                               type_time_auto_delete=type_time_auto_delete, interval_auto_delete=interval_auto_delete)
        await callback.message.answer(f'–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n'
                                      f'–¢–µ–≥ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫ –ø–æ—Å—Ç—É: <b>{tag}</b>\n\n'
                                      f'–î–∞–Ω–Ω—ã–π —Ç–µ–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç–∞', parse_mode='html')
        await callback.message.delete()
    else:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞
        posts = individual_post_db.get_post_by_tag(tag=tag)
        if int(day) == 99:  # –°–µ–≥–æ–¥–Ω—è
            job = CronJob(name=tag, tz='UTC+03:00').day.at(time).go(send_album, tag=tag,
                                                                    channels=channels, posts=posts,
                                                                    type_time_auto_delete=type_time_auto_delete,
                                                                    interval_auto_delete=interval_auto_delete)
        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏.
            job = CronJob(name=tag, tz='UTC+03:00').weekday(int(day)).at(time).go(send_album, tag=tag,
                                                                                  channels=channels, posts=posts,
                                                                                  type_time_auto_delete=type_time_auto_delete,
                                                                                  interval_auto_delete=interval_auto_delete)
        msh.add_job(job)
        await callback.message.answer(f'–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n'
                                      f'–¢–µ–≥ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫ –ø–æ—Å—Ç—É: <b>{tag}</b>\n\n'
                                      f'–î–∞–Ω–Ω—ã–π —Ç–µ–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç–∞', parse_mode='html')
        smiles = ['üíé', 'ü¶†', '‚òÉÔ∏è', '‚≠êÔ∏è']
        start_text = f'<b>–ü—Ä–∏–≤–µ—Ç</b>{random.choice(smiles)}\n\n' \
                     f'<i>–≠—Ç–æ –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º!</i>\n\n'
        await callback.message.answer(start_text,
                                      reply_markup=create_start_menu, parse_mode='html')


def register_handlers_create_individual_post():
    dp.register_callback_query_handler(start_create_post, Text(equals='start_create_post'))
    dp.register_callback_query_handler(set_channels_back, Text(equals='channels_tagged_back'),
                                       state=IndividualPostFSM.get_time)
    dp.register_callback_query_handler(get_time, Text(equals='channels_tagged_next'),
                                       state=IndividualPostFSM.get_channel)
    dp.register_callback_query_handler(set_channels, Text(startswith='channels_'), state=IndividualPostFSM.get_channel)
    dp.register_callback_query_handler(get_time_back, Text(equals='time_back'), state=IndividualPostFSM.get_day)
    dp.register_callback_query_handler(get_day, Text(startswith='time_'), state=IndividualPostFSM.get_time)
    dp.register_message_handler(get_day_message, state=IndividualPostFSM.get_time)
    dp.register_callback_query_handler(get_day_back, Text(equals='day_back'), state=IndividualPostFSM.get_button)
    dp.register_callback_query_handler(get_button_for_post, Text(startswith='day_'), state=IndividualPostFSM.get_day)
    dp.register_callback_query_handler(check_create_button, Text(startswith='create_url_'),
                                       state=IndividualPostFSM.get_button)
    dp.register_message_handler(get_url_for_button, state=IndividualPostFSM.get_text_for_button)
    dp.register_message_handler(get_post, state=IndividualPostFSM.get_url_for_button)
    dp.register_message_handler(confirm_create_post, state=IndividualPostFSM.get_post, content_types='any')
    dp.register_callback_query_handler(get_type_time_auto_delete, Text(equals='confirm_individual_auto_delete'),
                                       state=IndividualPostFSM.confirm)
    dp.register_callback_query_handler(get_interval_auto_delete, Text(startswith='autodelete_individual_type_time_'),
                                       state=IndividualPostFSM.get_type_time)
    dp.register_callback_query_handler(preview_post, Text(equals='confirm_individual_preview'),
                                       state=IndividualPostFSM.confirm)
    dp.register_callback_query_handler(get_time_before_publication, Text(equals='confirm_individual_time'),
                                       state=IndividualPostFSM.confirm)
    dp.register_callback_query_handler(get_channels_before_publication, Text('confirm_individual_channels'),
                                       state=IndividualPostFSM.confirm)
    dp.register_callback_query_handler(publication, Text(equals='confirm_individual_next'),
                                       state=IndividualPostFSM.confirm)
