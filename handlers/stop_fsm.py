import random

from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from create_bot.bot import dp
from keyboards.inline.start_command import create_start_menu


def create_keyboard_stop_fsm() -> InlineKeyboardMarkup:
    menu_stop = InlineKeyboardMarkup(row_width=1)
    stop_button = InlineKeyboardButton('üõëSTOPüõë', callback_data='stop_fsm')
    menu_stop.insert(stop_button)

    return menu_stop


# @dp.message_handler(commands='stop', state='*')
# @dp.message_handler(Text(equals=['stop'], ignore_case=True), state='*')
async def stop_fsm(message: [Message, CallbackQuery], state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        try:  # callback
            await message.answer()
            await message.message.answer("–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        except Exception:  # message
            await message.answer("–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        return

    await state.finish()
    smiles = ['üçµ', 'üßÉ', '‚òï', '‚ú®']
    start_text = f'<b>–ü—Ä–∏–≤–µ—Ç</b>{random.choice(smiles)}\n\n' \
                 f'<i>–≠—Ç–æ –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º!</i>\n\n'
    try:  # callback
        await message.answer()
        if random.randint(1, 20) == 19:
            await message.message.answer('‚ú®')
        await message.message.answer(f'–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {random.choice(smiles)}')
        await message.message.answer(start_text,
                                     reply_markup=create_start_menu, parse_mode='html')
    except Exception:  # message
        await message.answer(f'–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {random.choice(smiles)}',
                             reply_markup=ReplyKeyboardRemove())
        await message.answer(start_text,
                             reply_markup=create_start_menu, parse_mode='html')


def register_stop_fsm_handler():
    dp.register_message_handler(stop_fsm, commands='stop', state='*')
    dp.register_message_handler(stop_fsm, Text(equals=['stop', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å‚ùå'], ignore_case=True), state='*')
    dp.register_callback_query_handler(stop_fsm, Text(equals='stop_fsm', ignore_case=True), state='*')
